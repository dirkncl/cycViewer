@chapter "S"

@specimen "scope"

    Blah.

@specimen "seal"

    @article(@t(seal) @link(Object function))

    Blah.

@specimen "search"

    @article(@t(search) @link(String prototype function))

    Blah.

@specimen "semicolon"

    See @link(;).

    @article(semicolon insertion)

    See @link(automatic semicolon insertion)

@specimen "separator"

    Blah.

@specimen "set"

    See @link(object).


        @article "@t(set) @link(primordial function)"

            @list {
                @link(name set string)
            }

        @article "@t(set) @link(prototype)"

        @article "@t(set) @link(prototype function)"

            @list {
                @link(add set prototoype function)
                @link(clear set prototoype function)
                @link(delete set prototoype function)
                @link(entries set prototoype function)
                @link(forEach set prototoype function)
                @link(has set prototoype function)
                @link(keys set prototoype function)
                @link(values set prototoype function)
            }

    @specimen "setDate"

    @article(@t(setDate) @link(Date prototype function))

    Blah.

@specimen "setFloat32"

    @article(@t(setFloat32) @link(dataview prototype function))

    <Blah.>

@specimen "setFloat64"

    @article(@t(setFloat64) @link(dataview prototype function))

    <Blah.>

@specimen "setFullYear"

    @article(@t(setFullYear) @link(Date prototype function))

    Blah.

@specimen "setHours"

    @article(@t(setHours) @link(Date prototype function))

    Blah.

@specimen "setInt16"

    @article(@t(setInt16) @link(dataview prototype function))

    <Blah.>

@specimen "setInt32"

    @article(@t(setInt32) @link(dataview prototype function))

    <Blah.>

@specimen "setInt8"

    @article(@t(setInt8) @link(dataview prototype function))

    <Blah.>

@specimen "setMilliseconds"

    @article(@t(setMilliseconds) @link(Date prototype function))

    Blah.

@specimen "setMinutes"

    @article(@t(setMinutes) @link(Date prototype function))

    Blah.

@specimen "setMonth"

    @article(@t(setMonth) @link(Date prototype function))

    Blah.

@specimen "setSeconds"

    @article(@t(setSeconds) @link(Date prototype function))

    Blah.

@specimen "setTime"

    @article(@t(setTime) @link(Date prototype function))

    Blah.

@specimen "setUInt16"

    @article(@t(setUInt16) @link(dataview prototype function))

    <Blah.>

@specimen "setUInt32"

    @article(@t(setUInt32) @link(dataview prototype function))

    <Blah.>

@specimen "setUInt8"

    @article(@t(setUInt8) @link(dataview prototype function))

    <Blah.>

@specimen "setUTCDate"

    @article(@t(setUTCDate) @link(Date prototype function))

    Blah.

@specimen "setUTCFullYear"

    @article(@t(setUTCFullYear) @link(Date prototype function))

    Blah.

@specimen "setUTCHours"

    @article(@t(setUTCHours) @link(Date prototype function))

    Blah.

@specimen "setUTCMilliseconds"

    @article(@t(setUTCMilliseconds) @link(Date prototype function))

    Blah.

@specimen "setUTCMinutes"

    @article(@t(setUTCMinutes) @link(Date prototype function))

    Blah.

@specimen "setUTCMonth"

    @article(@t(setUTCMonth) @link(Date prototype function))

    Blah.

@specimen "setYear"

    @article(@t(setYear) @link(Date prototype function))

    Blah.

@specimen "shift"

    @article(@t(shift) @link(Array prototype function))

    Blah.

    @article(shift @link(operator))

    @list{
    @link(<< infix operator)
    @link(<<= assignment infix operator)
    @link(>> infix operator)
    @link(>>= assignment infix operator)
    @link(>>> infix operator)
    @link(>>>= assignment infix operator)
    }

@specimen "sign"

    Blah.

@specimen "sin"

    @article(@t(sin) @link(Math function) @aka(sine))

    The Math.sin(radians) function, also known as sine,
    takes an angle in radians and returns a number in the range -1...1.

    @begin(program)
    function cartesian(distance, radians) {

    // Given a distance and direction from the origin in radians,
    // produce a cartesian point.

        return {
            x: distance * Math.cos(radians),
            y: distance * Math.sin(radians)
        };
    }
    @end(program)

    This is an approximate implemention of Math.sin:

    @begin(program)
    Math.sin = (function () {
        var factorial = 1,
            last_stage = 40,
            sign = -1,
            signed_factorial_recipricals = [],
            stage,
            two_pi = Math.PI * 2;

        for (stage = 3; stage < last_stage; stage += 2) {
            factorial *= (stage - 1) * stage;
            signed_factorial_recipricals[stage] = sign / factorial;
            sign = -sign;
        }
        return function sin(radians) {
            while (radians >= two_pi) {
                radians -= two_pi;
            }
            while (radians < 0) {
                radians += two_pi;
            }
            var result = radians,
                rr = radians * radians,
                stage;
            for (stage = 3; stage < last_stage; stage += 2) {
                radians *= rr;
                result += radians * signed_factorial_recipricals[stage];
            }
            return result;
        };
    }());
    @end(program)

@specimen "sizeof"

    @article(@t(sizeof) @link(prefix operator))

    Blah.

@specimen "slice"

    @article(@t(slice) @link(Array prototype function))

    Blah.

    @article(@t(slice) @link(arraybuffer prototype function))

    Blah.

    @article(@t(slice) @link(String prototype function))

    Blah.

@specimen "sloppy mode"

@specimen "some"

    @article(@t(some) @link(Array prototype function))

    Blah.

@specimen "space"

    Blah.

@specimen "special character"

    See
    @begin(list)
    @link(!)
    @link(")
    @link($)
    @link(%)
    @link(&)
    @link(')
    @link[(]
    @link[)]
    @link(*)
    @link(+)
    @link(,)
    @link(-)
    @link(.)
    @link(/)
    @link(:)
    @link(;)
    @link(<)
    @link(=)
    @link(>)
    @link(?)
    @link([)
    @link(\)
    @link(])
    @link(^)
    @link(_)
    @link({)
    @link(|)
    @link(})
    @link(~)
    @end(list)

@specimen "splice"

    @article(@t(splice) @link(Array prototype function))

    Blah.

@specimen "split"

    @article(@t(split) @link(String prototype function))

    Blah.

@specimen "sqrt"

    @article(@t(sqrt) @link(Math function))

    Math.sqrt(number) is the square root function. It returns a value which, when multiplied by itself, is approximately equal to the original number. It could be implemented as

    @begin(program)
    Math.sqrt = function (number) {
        return Math.pow(number, 0.5);
    };
    @end(program)

    Example:

    @begin(program)
    function distance(a, b) {

    // Compute the distance between two points.

        return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
    }
    @end(program)

@specimen "SQRT1_2"

    @article(@t(SQRT1_2) @link(Math number))

    Math.SQRT1_2 holds the result of Math.sqrt(1 / 2), which is approximately 0.7071067811865476.

@specimen "SQRT2"

    @article(@t(SQRT2) @link(Math number))

    Math.SQRT2 holds the result of Math.sqrt(2), which is approximately 1.4142135623730951.

@specimen "square root"

    See @link(sqrt Math function).

@specimen "stack"

    Blah.

@specimen "statement"

    A statement is a syntactic unit of execution. A @link(compilation unit) or a
    @link(function body) contains a list of zero or more statements which will be
    executed in order from first to last. Each statement runs to completion before
    the next statement is executed. Some statements can contain other statements.
    These are the kinds of statements:

    @list {
    @link(block)
    @link(break statement)
    @link(continue statement)
    @link(debugger statement)
    @link(do statement)
    @link(empty statement)
    @link(expression statement)
    @link(for in statement)
    @link(for statement)
    @link(function statement)
    @link(if statement)
    @link(return statement)
    @link(switch statement)
    @link(throw statement)
    @link(try statement)
    @link(var statement)
    @link(while statement)
    }

    Also see @link(;), @link(conditional statement), @link(disruptive statement), and @link(loop statement).

    @article "statement label"

    See @link(label).

    @article "statement punctuator"

    See @link<(>, @link<)>, @link(;).

@specimen "static @reserved@"

@specimen "strict mode"

    The ES5/strict dialect removes or modifies a few of the languageâ€™s most problematic features. It requires source-level opt-in in order to not break compatibility. It is recommended that strict mode always be requested.

    Because strict mode can break compatibility with ES3, it must be explicitly requested with the strict mode pragma. The pragma takes the form of a string literal expression statement:

    @program <"use strict";>

    It will be ignored by @link(ES3) processors, so it is possible to create @link(ES5)/strict programs that will work correctly in ES3 processors. The strict mode pragma can be placed at the top of a compilation unit, or as the first statement of a function body. When placed at the top of a compilation unit, it indicates that the entire compilation unit is to be treated strictly. This is the preferred usage. When placed at the top of a function body, it indicates that the function is to be treated strictly. It is possible to mix strict mode code and non-strict mode code. Functions compiled in either mode can call functions compiled in the other mode.

    @list {
    whether a failed property assignment or deletion fails silently or noisily (with a thrown error).
    Although strict code may say "delete global.Object", it may not say "delete Object". Nonstrict code may say either.
    If the global "Object" property is already deleted and the global object is extensible, then, although strict code can say "global.Object = 8;" or (at top level) "var Object = 8;" or "function Object...", simply saying "Object = 8" will fail. All four will succeed in nonstrict code.
    }

    Blah.

@specimen "string"

    A string is a finite ordered sequence of zero or more characters. A character is a 16 bit Unicode code unit. A string is immutable, so once a string is made, it cannot be changed. Two strings containing the same code points in the same order will be found to be equal by the === infix operator. The typeof prefix operator produces 'string' when its operand is a string. Two strings can be combined to produce a new sting with the + infix operator add or concatenate.

    @program <'cat' === 'c' + 'a' + 't'    // true>

    A string contains a @link(length string prototype number) that produces a number which is the number of code units in the string. There is no fixed limit on the size of a string.

    @program {
    "".length                   // 0
    ('c' + 'a' + 't').length    // 3
    }

    A string value inherits from @link(String prototype). This provides methods such as @link(charAt String prototype function) that can fetch a single character from a string, or slice String prototype function that can fetch a substring from a string. See String prototype function.

    A string can contain any kind of textual material, including programs.

    There is no separate character type. A single character is represented as a string with a length of 1.

    @article(@t(String) @link(escapement))

    @article(@t(String) @link(function))

    @list{
        @link(fromCharCode String function)
        @link(fromCodePoint String function)
        @link(raw String function)
    }

    @article(string @link(literal))

    A @link(string literal) is used to include a string value in a program. There are two forms of string literal: single quote string literal and double quote string literal. They differ only in the character used to wrap the characters.

    A @link(string literal) is a token made up of a quoting character, zero or more character literals, and a matching quoting character.

    The quoting characters are

    @list {
        @link(')
        @link(")
    }

    A character literal can be

    @list {
        any Unicode character that is not a @link(line terminator), nor a @link(\) nor the quoting character (although it can be the other quoting character)
        a @link(Unicode escape sequence)
        a compact escape sequence
    }

    A Unicode escape sequence is a @t(\u) followed by 4 hexadecimal digits.
    The digits are evaluated in base 16 to produce a single 16 bit code unit.

    A compact escape sequence is a @link(\) followed by one of the following:

    @table {
    @!Character after @link(\)@|@!The resulting character
    @_@t(@link(')) @|@t(@link('))
    @_@t(@link(")) @|@t(@link("))
    @_@t(@link(\)) @|@t(@link(\))
    @_@t(b)@|@link(bs)
    @_@t(f)@|@link(ff)
    @_@t(n)@|@link(lf)
    @_@t(r)@|@link(cr)
    @_@t(t)@|@link(ht)
    @_@t(v)@|@link(vt)
    @_@t(x) 2 hexadecimal digits@|A character between \u0000 and \u00ff
    @_@link(line terminator) @| @link(line continuation)
    }

    These all represent the same string:

    @program <'"'  "\""  '\x22'  "\u0022">

    If the character after the @link(\) is a @link(line terminator) or the @link(line terminator) pair @link(cr) @link(lf), then the line terminator (or line terminator pair) will be ignored. This produces line continuation, permitting a string literal to be continued over more than one line. Be careful, it can be tricky: If the character following the \ backslash is ordinary whitespace and not a line terminator, then a syntax error will result. All whitespace looks alike.

    @begin(program)
        var long_line_1 = "This is a \
    long line";                         // ok
        var long_line_2 = "This is a \
    long line";                         // syntax error
    @end(program)

    There is no limit on the length of a string literal. The empty string can be represented as '' or "".

    Because there are two forms of string literal, there is confusion about which to use. The language itself is completely neutral on this question, but there are some principle of good practice to consider:

        Be consistent. It can be visually confusing to randomly change forms. Visual confusion can lead to bugs.
        Use the ' form for symbols, character constants, and internal strings such as property names.
        Use the " form for strings that will be exported from the program, such as HTML fragments, URLs, or messages to the user.

    @article(@t(String) @link(primordial function))

    @t(String) is a global function that serves three purposes.

    First, when invoked as a function, it takes any operand and produces a string value.

    Second, when invoked as a constructor with the new prefix operator, takes an operand and produces an object whose valueOf method produces a string value.

    Third, it has a prototype property that holds the methods that are inherited by all strings.

    @article(@t(String) @link(prototype))

    Blah.

    @article(@t(String) @link(prototype function))

    @list{
    @link(charAt String prototype function)
    @link(charCodeAt String prototype function)
    @link(codePointAt String prototype function)
    @link(compareLocale String prototype function)
    @link(concat String prototype function)
    @link(concat String prototype function)
    @link(endsWith String prototype function)
    @link(includes String prototype function)
    @link(indexOf String prototype function)
    @link(lastIndexOf String prototype function)
    @link(localeCompare String prototype function)
    @link(match String prototype function)
    @link(normalize String prototype function)
    @link(repeat String prototype function)
    @link(replace String prototype function)
    @link(search String prototype function)
    @link(slice String prototype function)
    @link(split String prototype function)
    @link(substring String prototype function)
    @link(toLocaleLowerCase String prototype function)
    @link(toLocaleUpperCase String prototype function)
    @link(toLowerCase String prototype function)
    @link(toString String prototype function)
    @link(toUpperCase String prototype function)
    @link(trim String prototype function)
    @link(valueOf String prototype function)
    }

    @article(@t(String) @link(prototype number))

    @link(length)

@specimen "stringify"

    @article(@t(stringify) @link(JSON function))

    Blah.

@specimen "substr"

    @article(@t(substr) @link(String prototype function))

    Blah.

@specimen "substring"

    @article(@t(substring) @link(String prototype function))

    Blah.

@specimen "subtract"

    See @link(- infix operator).

@specimen "suffix operator"

    Blah.

    @list {
        @link[( ) suffix operator]
        @link(. suffix operator)
        @link([ ] suffix operator)
    }

    Also see @link(assignment suffix operator).

@specimen "super @reserved@"

@specimen "switch @reserved@"

    @article(@t(switch) @link(statement))

    Blah.

@specimen "SyntaxError"

    @article(@t(SyntaxError) @link(primordial function))

    Blah.
